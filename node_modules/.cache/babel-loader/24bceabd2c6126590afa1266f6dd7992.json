{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\geoff\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport CreateDeck from \"./CreateDeck\";\nimport DisplayCard from \"./DisplayCard\";\nimport NewDeckForm from \"./NewDeckForm\";\nimport ListDecks from \"./ListDecks\";\nimport Breadcrumb from \"./Breadcrumb\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Layout() {\n  _s();\n\n  const [flip, setFlip] = useState(false);\n\n  const handleFlip = () => setFlip(val => val = !flip);\n\n  useEffect(() => {\n    getDecks();\n    return () => {\n      abortController.abort();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  /**\n   * Fetches all of the current decks from the database.\n   */\n\n  async function getDecks() {\n    try {\n      const response = await listDecks(signal);\n      setDecks(response);\n    } catch (error) {\n      if (error.name !== \"AbortError\") {\n        throw error;\n      }\n    }\n  }\n  /**\n   * Posts a deck to the database.\n   * @param {Object} deck - A deck object representing a stack of cards.\n   * @returns {number} The id of the newly created deck.\n   */\n\n\n  async function addDeck(deck) {\n    const created = await createDeck(deck, signal);\n    getDecks();\n    return created.id;\n  }\n  /**\n   * Posts a card in the database.\n   * @param {Object} card - A card object representing a flashcard.\n   * @param {number} id - The id of the deck to post in.\n   * @returns {number} The id of the newly edited card.\n   */\n\n\n  async function addCard(card, id) {\n    const created = await createCard(id, card, signal);\n    getDecks();\n    return created.id;\n  }\n  /**\n   * Updates a deck in the database.\n   * @param {Object} deck - A deck object representing a stack of cards.\n   * @returns {number} The id of the newly edited deck.\n   */\n\n\n  async function editDeck(deck) {\n    const edited = await updateDeck(deck, signal);\n    getDecks();\n    return edited.id;\n  }\n  /**\n   * Updates a card in the database.\n   * @param {Object} card - A card object representing a flashcard.\n   * @returns {number} The id of the newly edited card.\n   */\n\n\n  async function editCard(card) {\n    const edited = await updateCard(card, signal);\n    getDecks();\n    return edited.id;\n  }\n  /**\n   * Deletes a deck in the database.\n   * @param {Object} id - id of the deck to delete.\n   */\n\n\n  async function removeDeck(id) {\n    if (window.confirm(`Delete this deck?\\n\\nYou will not be able to recover it.`)) {\n      await deleteDeck(id, signal);\n      getDecks();\n      history.push(\"/\");\n    }\n  }\n  /**\n   * Deletes a card in the database.\n   * @param {Object} id - id of the card to delete.\n   */\n\n\n  async function removeCard(id) {\n    if (window.confirm(`Delete this card?\\n\\nYou will not be able to recover it.`)) {\n      await deleteCard(id, signal);\n      getDecks();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          children: [/*#__PURE__*/_jsxDEV(CreateDeck, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ListDecks, {\n            decks: decks,\n            cards: cards\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/study\",\n          children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DisplayCard, {\n            flip: flip,\n            handleFlip: handleFlip,\n            cards: cards,\n            decks: decks\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/new\",\n          children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NewDeckForm, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/edit\",\n          children: /*#__PURE__*/_jsxDEV(Breadcrumb, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/cards/new\",\n          children: /*#__PURE__*/_jsxDEV(Breadcrumb, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/cards/:cardId/edit\",\n          children: /*#__PURE__*/_jsxDEV(Breadcrumb, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          children: /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Layout, \"Sa3E19PvEhb+rFn4FGudT0spP/M=\");\n\n_c = Layout;\nexport default Layout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["C:/Users/geoff/Project_Flashcards_Qualified_1/src/Layout/index.js"],"names":["React","useState","Route","Switch","Header","NotFound","CreateDeck","DisplayCard","NewDeckForm","ListDecks","Breadcrumb","Layout","flip","setFlip","handleFlip","val","useEffect","getDecks","abortController","abort","response","listDecks","signal","setDecks","error","name","addDeck","deck","created","createDeck","id","addCard","card","createCard","editDeck","edited","updateDeck","editCard","updateCard","removeDeck","window","confirm","deleteDeck","history","push","removeCard","deleteCard","decks","cards"],"mappings":"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","sourcesContent":["import React, { useState }  from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport CreateDeck from \"./CreateDeck\"\nimport DisplayCard from \"./DisplayCard\"\nimport NewDeckForm from \"./NewDeckForm\"\nimport ListDecks from \"./ListDecks\";\nimport Breadcrumb from \"./Breadcrumb\"\n\nfunction Layout() {\n  const [flip, setFlip] = useState(false)\n\n  const handleFlip = () => setFlip((val) => val = !flip)\n\n  useEffect(() => {\n\t\tgetDecks();\n\n\t\treturn () => {\n\t\t\tabortController.abort();\n\t\t};\n\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\t/**\n\t * Fetches all of the current decks from the database.\n\t */\n\tasync function getDecks() {\n\t\ttry {\n\t\t\tconst response = await listDecks(signal);\n\t\t\tsetDecks(response);\n\t\t}\n\t\tcatch(error) {\n\t\t\tif(error.name !== \"AbortError\") {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Posts a deck to the database.\n\t * @param {Object} deck - A deck object representing a stack of cards.\n\t * @returns {number} The id of the newly created deck.\n\t */\n\tasync function addDeck(deck) {\n\t\tconst created = await createDeck(deck, signal);\n\t\tgetDecks();\n\t\treturn created.id;\n\t}\n\n\t/**\n\t * Posts a card in the database.\n\t * @param {Object} card - A card object representing a flashcard.\n\t * @param {number} id - The id of the deck to post in.\n\t * @returns {number} The id of the newly edited card.\n\t */\n\tasync function addCard(card, id) {\n\t\tconst created = await createCard(id, card, signal);\n\t\tgetDecks();\n\t\treturn created.id;\n\t}\n\n\t/**\n\t * Updates a deck in the database.\n\t * @param {Object} deck - A deck object representing a stack of cards.\n\t * @returns {number} The id of the newly edited deck.\n\t */\n\tasync function editDeck(deck) {\n\t\tconst edited = await updateDeck(deck, signal);\n\t\tgetDecks();\n\t\treturn edited.id;\n\t}\n\n\t/**\n\t * Updates a card in the database.\n\t * @param {Object} card - A card object representing a flashcard.\n\t * @returns {number} The id of the newly edited card.\n\t */\n\tasync function editCard(card) {\n\t\tconst edited = await updateCard(card, signal);\n\t\tgetDecks();\n\t\treturn edited.id;\n\t}\n\n\t/**\n\t * Deletes a deck in the database.\n\t * @param {Object} id - id of the deck to delete.\n\t */\n\tasync function removeDeck(id) {\n\t\tif(window.confirm(`Delete this deck?\\n\\nYou will not be able to recover it.`)) {\n\t\t\tawait deleteDeck(id, signal);\n\t\t\tgetDecks();\n\t\t\thistory.push(\"/\");\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a card in the database.\n\t * @param {Object} id - id of the card to delete.\n\t */\n\tasync function removeCard(id) {\n\t\tif(window.confirm(`Delete this card?\\n\\nYou will not be able to recover it.`)) {\n\t\t\tawait deleteCard(id, signal);\n\t\t\tgetDecks();\n\t\t}\n\t}\n\n\n  return (\n    <>\n      <Header />\n      \n      <div className=\"container\">\n        <Switch>\n          <Route path=\"/\" exact={true}>\n            <CreateDeck />\n            <ListDecks decks={decks} cards={cards}/>\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <Breadcrumb />\n            <DisplayCard \n              flip={flip} \n              handleFlip={handleFlip}\n              cards={cards}\n              decks={decks}/>\n          </Route>\n          <Route path=\"/decks/new\">\n            <Breadcrumb />\n            <NewDeckForm />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <Breadcrumb />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <Breadcrumb />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <Breadcrumb />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n        {/* TODO: Implement the screen starting here */}\n        \n        \n      </div>\n    </>\n  );\n}\n\nexport default Layout;\n"]},"metadata":{},"sourceType":"module"}