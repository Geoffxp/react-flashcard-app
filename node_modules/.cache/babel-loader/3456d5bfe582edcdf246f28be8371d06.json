{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\geoff\\\\Desktop\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Decks\\\\DeckRoutes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Switch, Route, useParams } from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api/index\";\nimport DisplayDeck from \"./DisplayDeck\";\nimport Breadcrumb from \"../Tools/Breadcrumb\";\nimport CardList from \"../Cards/CardList\";\nimport DeckEdit from \"./DeckEdit\";\nimport CardRoutes from \"../Cards/CardRoutes\";\nimport Study from \"../Cards/Study\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DeckRoutes({\n  getDecks\n}) {\n  _s();\n\n  const {\n    deckId\n  } = useParams();\n  const [deck, setDeck] = useState({});\n  const [cards, setCards] = useState([]);\n  const abortController = new AbortController();\n  const signal = abortController.signal;\n\n  async function getDeck() {\n    const response = await readDeck(deckId);\n    setDeck(response);\n    setCards(response.cards);\n  }\n\n  useEffect(() => {\n    getDeck();\n    return () => {\n      abortController.abort();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/decks/:deckId/study\",\n        children: /*#__PURE__*/_jsxDEV(Study, {\n          deck: deck,\n          cards: cards\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/decks/:deckId/edit\",\n        children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n          page: \"Edit Deck\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DeckEdit, {\n          deck: deck,\n          getDeck: getDeck\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/decks/:deckId/cards\",\n        children: /*#__PURE__*/_jsxDEV(CardRoutes, {\n          deck: deck,\n          getDeck: getDeck\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/decks/:deckId\",\n        children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n          deck: deck\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DisplayDeck, {\n          deck: deck,\n          deckPage: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardList, {\n          cards: cards,\n          getDeck: getDeck\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DeckRoutes, \"E69ru8AsiT5pnCkLuZAQr1DBl8c=\", false, function () {\n  return [useParams];\n});\n\n_c = DeckRoutes;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckRoutes\");","map":{"version":3,"sources":["C:/Users/geoff/Desktop/Project_Flashcards_Qualified_1/src/Layout/Decks/DeckRoutes.js"],"names":["React","useState","useEffect","Switch","Route","useParams","readDeck","DisplayDeck","Breadcrumb","CardList","DeckEdit","CardRoutes","Study","DeckRoutes","getDecks","deckId","deck","setDeck","cards","setCards","abortController","AbortController","signal","getDeck","response","abort"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,SAAxB,QAAyC,kBAAzC;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAEA,eAAe,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAiC;AAAA;;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAaV,SAAS,EAA5B;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMmB,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACA,QAAMC,MAAM,GAAGF,eAAe,CAACE,MAA/B;;AAEA,iBAAeC,OAAf,GAAwB;AACtB,UAAMC,QAAQ,GAAG,MAAMlB,QAAQ,CAACS,MAAD,CAA/B;AACAE,IAAAA,OAAO,CAACO,QAAD,CAAP;AACAL,IAAAA,QAAQ,CAACK,QAAQ,CAACN,KAAV,CAAR;AACD;;AACDhB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,OAAO;AAEP,WAAO,MAAM;AACXH,MAAAA,eAAe,CAACK,KAAhB;AACD,KAFD;AAGD,GANQ,EAMN,EANM,CAAT;AAOA,sBACE;AAAA,2BACE,QAAC,MAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,sBAAZ;AAAA,+BACE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAET,IAAb;AAAmB,UAAA,KAAK,EAAEE;AAA1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,qBAAZ;AAAA,gCACI,QAAC,UAAD;AAAY,UAAA,IAAI,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEE,QAAC,QAAD;AAAU,UAAA,IAAI,EAAEF,IAAhB;AAAsB,UAAA,OAAO,EAAEO;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAQE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,sBAAZ;AAAA,+BACE,QAAC,UAAD;AAAY,UAAA,IAAI,EAAEP,IAAlB;AAAwB,UAAA,OAAO,EAAEO;AAAjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cARF,eAWE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,gBAAZ;AAAA,gCACE,QAAC,UAAD;AAAY,UAAA,IAAI,EAAEP;AAAlB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,WAAD;AAAa,UAAA,IAAI,EAAEA,IAAnB;AAAyB,UAAA,QAAQ,EAAE;AAAnC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,QAAD;AAAU,UAAA,KAAK,EAAEE,KAAjB;AAAwB,UAAA,OAAO,EAAEK;AAAjC;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GAxCuBV,U;UACHR,S;;;KADGQ,U","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Switch, Route, useParams } from \"react-router-dom\";\r\nimport { readDeck } from \"../../utils/api/index\";\r\nimport DisplayDeck from \"./DisplayDeck\";\r\nimport Breadcrumb from \"../Tools/Breadcrumb\";\r\nimport CardList from \"../Cards/CardList\";\r\nimport DeckEdit from \"./DeckEdit\";\r\nimport CardRoutes from \"../Cards/CardRoutes\";\r\nimport Study from \"../Cards/Study\";\r\n\r\nexport default function DeckRoutes({ getDecks }){\r\n  const { deckId } = useParams();\r\n  const [deck, setDeck] = useState({});\r\n  const [cards, setCards] = useState([]);\r\n  const abortController = new AbortController();\r\n  const signal = abortController.signal;\r\n  \r\n  async function getDeck(){\r\n    const response = await readDeck(deckId)\r\n    setDeck(response)\r\n    setCards(response.cards)\r\n  }\r\n  useEffect(() => {\r\n    getDeck();\r\n    \r\n    return () => {\r\n      abortController.abort();\r\n    }\r\n  }, [])\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route path=\"/decks/:deckId/study\">\r\n          <Study deck={deck} cards={cards} />\r\n        </Route>\r\n        <Route path=\"/decks/:deckId/edit\">\r\n            <Breadcrumb page=\"Edit Deck\" />\r\n          <DeckEdit deck={deck} getDeck={getDeck} />\r\n        </Route>\r\n        <Route path=\"/decks/:deckId/cards\">\r\n          <CardRoutes deck={deck} getDeck={getDeck}/>\r\n        </Route>\r\n        <Route path=\"/decks/:deckId\">\r\n          <Breadcrumb deck={deck}/>\r\n          <DisplayDeck deck={deck} deckPage={true} />\r\n          <CardList cards={cards} getDeck={getDeck} />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}