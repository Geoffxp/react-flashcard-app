{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\geoff\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Deck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useRouteMatch, Switch, Route, useParams } from \"react-router-dom\";\nimport { listCards } from \"../utils/api/index\";\nimport Breadcrumb from \"./Breadcrumb\";\nimport NewDeckForm from \"./NewDeckForm\";\nimport DisplayDeck from \"./DisplayDeck\";\nimport CardList from \"./CardList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Deck({\n  decks\n}) {\n  _s();\n\n  const {\n    url\n  } = useRouteMatch();\n  const {\n    deckId\n  } = useParams();\n  const deck = decks.find(deck => deck.id == deckId);\n  const [cards, setCards] = useState([]);\n  const abortController = new AbortController();\n  const signal = abortController.signal;\n\n  async function getCards() {\n    try {\n      const response = await listCards(deck.id, signal);\n      setCards(response);\n    } catch (error) {\n      if (error.name !== \"AbortError\") {\n        throw error;\n      }\n    }\n  }\n\n  useEffect(() => {\n    getCards();\n    return () => {\n      abortController.abort();\n    };\n  }, []);\n  const cardList = cards.filter(card => card.deckId == deckId);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/decks/new\",\n        children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n          page: url,\n          deck: deck\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(NewDeckForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/decks/:deckId\",\n        children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n          page: url,\n          deck: deck\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(DisplayDeck, {\n          deck: deck,\n          cards: cards,\n          deckPage: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(CardList, {\n          cards: cards\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/decks/:deckId/study\",\n        children: /*#__PURE__*/_jsxDEV(StudyCards, {\n          decks: decks,\n          cards: cards\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(Deck, \"KlYzYLPvnJMdziLeBZwFNdmkkTI=\", false, function () {\n  return [useRouteMatch, useParams];\n});\n\n_c = Deck;\n\nvar _c;\n\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"sources":["C:/Users/geoff/Project_Flashcards_Qualified_1/src/Layout/Deck.js"],"names":["React","useState","useEffect","useRouteMatch","Switch","Route","useParams","listCards","Breadcrumb","NewDeckForm","DisplayDeck","CardList","Deck","decks","url","deckId","deck","find","id","cards","setCards","abortController","AbortController","signal","getCards","response","error","name","abort","cardList","filter","card"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,KAAhC,EAAuCC,SAAvC,QAAwD,kBAAxD;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAAwB;AAAA;;AACnC,QAAM;AAAEC,IAAAA;AAAF,MAAUX,aAAa,EAA7B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAaT,SAAS,EAA5B;AACA,QAAMU,IAAI,GAAGH,KAAK,CAACI,IAAN,CAAWD,IAAI,IAAIA,IAAI,CAACE,EAAL,IAAWH,MAA9B,CAAb;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMoB,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACH,QAAMC,MAAM,GAAGF,eAAe,CAACE,MAA/B;;AAEG,iBAAeC,QAAf,GAA0B;AAClB,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMlB,SAAS,CAACS,IAAI,CAACE,EAAN,EAAUK,MAAV,CAAhC;AACAH,MAAAA,QAAQ,CAACK,QAAD,CAAR;AACH,KAHD,CAIA,OAAMC,KAAN,EAAa;AACT,UAAGA,KAAK,CAACC,IAAN,KAAe,YAAlB,EAAgC;AAC5B,cAAMD,KAAN;AACH;AACJ;AACJ;;AAELxB,EAAAA,SAAS,CAAC,MAAM;AACRsB,IAAAA,QAAQ;AAER,WAAO,MAAM;AACTH,MAAAA,eAAe,CAACO,KAAhB;AACH,KAFD;AAGH,GANI,EAMF,EANE,CAAT;AASA,QAAMC,QAAQ,GAAGV,KAAK,CAACW,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAAChB,MAAL,IAAeA,MAApC,CAAjB;AACA,sBACI;AAAA,2BACA,QAAC,MAAD;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,YAAZ;AAAA,gCACI,QAAC,UAAD;AAAY,UAAA,IAAI,EAAED,GAAlB;AAAuB,UAAA,IAAI,EAAEE;AAA7B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,gBAAZ;AAAA,gCACI,QAAC,UAAD;AAAY,UAAA,IAAI,EAAEF,GAAlB;AAAuB,UAAA,IAAI,EAAEE;AAA7B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,WAAD;AAAa,UAAA,IAAI,EAAEA,IAAnB;AAAyB,UAAA,KAAK,EAAEG,KAAhC;AAAuC,UAAA,QAAQ,EAAE;AAAjD;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,QAAD;AAAU,UAAA,KAAK,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAUI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,sBAAZ;AAAA,+BACA,QAAC,UAAD;AACI,UAAA,KAAK,EAAEN,KADX;AACkB,UAAA,KAAK,EAAEM;AADzB;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAqBH;;GAnDuBP,I;UACJT,a,EACGG,S;;;KAFCM,I","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useRouteMatch, Switch, Route, useParams } from \"react-router-dom\";\r\nimport { listCards } from \"../utils/api/index\"\r\nimport Breadcrumb from \"./Breadcrumb\";\r\nimport NewDeckForm from \"./NewDeckForm\";\r\nimport DisplayDeck from \"./DisplayDeck\"\r\nimport CardList from \"./CardList\"\r\n\r\nexport default function Deck({ decks }){\r\n    const { url } = useRouteMatch();\r\n    const { deckId } = useParams()\r\n    const deck = decks.find(deck => deck.id == deckId)\r\n    const [cards, setCards] = useState([]);\r\n    const abortController = new AbortController();\r\n\tconst signal = abortController.signal;\r\n\r\n    async function getCards() {\r\n            try {\r\n                const response = await listCards(deck.id, signal);\r\n                setCards(response);\r\n            }\r\n            catch(error) {\r\n                if(error.name !== \"AbortError\") {\r\n                    throw error;\r\n                }\r\n            }\r\n        }\r\n\r\n    useEffect(() => {\r\n            getCards();\r\n\r\n            return () => {\r\n                abortController.abort();\r\n            };\r\n        }, []);\r\n\r\n\r\n    const cardList = cards.filter(card => card.deckId == deckId)\r\n    return (\r\n        <>\r\n        <Switch>\r\n            <Route path=\"/decks/new\">\r\n                <Breadcrumb page={url} deck={deck} />\r\n                <NewDeckForm />\r\n            </Route>\r\n            <Route path=\"/decks/:deckId\">\r\n                <Breadcrumb page={url} deck={deck} />\r\n                <DisplayDeck deck={deck} cards={cards} deckPage={true}/>\r\n                <CardList cards={cards} />\r\n            </Route>\r\n            <Route path=\"/decks/:deckId/study\">\r\n            <StudyCards \r\n                decks={decks} cards={cards}/>\r\n            </Route>\r\n            \r\n        </Switch>\r\n            \r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}